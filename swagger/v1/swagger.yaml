openapi: 3.0.1
info:
  title: API V1
  description: inter_backend
  version: v1
paths:
  "/api/v1/auth":
    post:
      tags:
        - auth
      summary: Get information of user
      description: That route is used to get information about an user
      parameters:
        - name: Authorization
          in: header
          description: Token containing email and password of the user
          required: true
          example: "token"
        - name: Content-Type
          in: header
          description: Type of the content sent in the request
          required: true
          example: "application/json"
        - name: Accept
          in: header
          description: Type of the content accepted in the response
          required: true
          example: "application/json"
        - name: AppKey
          in: header
          description: Numeric key to identify the application
          required: true
          example: "12345"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "token"
                  status:
                    type: string
                    example: "SUCCESS"
                  message:
                    type: string
                    example: "User logged in"
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
  "/api/v1/users":
    get:
      tags:
        - users
      summary: Get all users
      description: That route is used to get all users
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: "name"
                        email:
                          type: string
                          example: "email"
                        phone:
                          type: string
                          example: "phone"
                        address:
                          type: string
                          example: "address"
                        status:
                          type: string
                          example: "status"
                        created_at:
                          type: string
                          example: "created_at"
                        updated_at:
                          type: string
                          example: "updated_at"
                  message:
                    type: string
                    example: "Users retrieved"
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
    post:
      tags:
        - users
      summary: Create a new user
      description: That route is used to create a new user.
      parameters:
        - in: body
          name: body
          description: Data of the user to be created.
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
              phone:
                type: string
              password:
                type: string
              address:
                type: string
      responses:
        '201':
          description: User has been created.
          schema:
            type: object
            properties:
              user:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
        '400':
          description: Bad request.
  /api/v1/ongs:
    get:
      tags:
        - ongs
      summary: Find all ongs
      description: This route is used to find all ongs.
      responses:
        '200':
          description: OK. Returns a list of all ongs.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The ID of the ong.
                        name:
                          type: string
                          description: The name of the ong.
                        email:
                          type: string
                          description: The email of the ong.
                        phone:
                          type: string
                          description: The phone number of the ong.
                        address:
                          type: string
                          description: The address of the ong.
        '404':
          description: No ongs found.
    post:
      tags:
        - ongs
      summary: Create a new ong
      description: This route is used to create a new ong.
      parameters:
        - in: body
          name: body
          description: Data of the ong to be created.
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
              phone:
                type: string
              address:
                type: string
              password:
                type: string
              cnpj:
                type: string
      responses:
        '201':
          description: Ong has been created.
          schema:
            type: object
            properties:
              ong:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
        '400':
          description: Bad request.
  /api/v1/outofstock:
    post:
      tags:
        - outofstock
      summary: Register an out-of-stock product for an ong.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ong_id:
                  type: string
                  description: The ID of the ong that is registering the out-of-stock product.
                product:
                  type: string
                  description: The name of the out-of-stock product.
                quantity:
                  type: string
                  description: The quantity of the out-of-stock product.
                weight:
                  type: string
                  description: The weight of the out-of-stock product.
      responses:
        '201':
          description: OK. The out-of-stock product was registered successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The message indicating that the out-of-stock product was registered successfully.
        '400':
          description: Bad Request. The request was invalid or missing required parameters.
        '404':
          description: Not Found. The requested resource was not found.
        '500':
          description: Internal Server Error. The server encountered an error while processing the request.
  /api/v1/list-outofstock:
    get:
      tags:
        - outofstock
      summary: List all out-of-stock products for a given ong.
      parameters:
        - name: ong_id
          in: query
          required: true
          schema:
            type: string
            description: The ID of the ong to list out-of-stock products for.
      responses:
        '200':
          description: OK. The list of out-of-stock products for the given ong was returned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: The list of out-of-stock products for the given ong.
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The ID of the out-of-stock product.
                        ong_id:
                          type: integer
                          description: The ID of the ong that registered the out-of-stock product.
                        product:
                          type: string
                          description: The name of the out-of-stock product.
                        quantity:
                          type: integer
                          description: The quantity of the out-of-stock product.
                        weight:
                          type: integer
                          description: The weight of the out-of-stock product.
                        created_at:
                          type: string
                          format: date-time
                          description: The date and time when the out-of-stock product was registered.
                        updated_at:
                          type: string
                          format: date-time
                          description: The date and time when the out-of-stock product was last updated.
        '400':
          description: Bad Request. The request was invalid or missing required parameters.
        '404':
          description: Not Found. The requested resource was not found.
        '500':
          description: Internal Server Error. The server encountered an error while processing the request.
